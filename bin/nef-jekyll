#!/bin/bash

LOG_PATH="/nef/docs"
BASE_JEKYLL='docs'
BASE_SIDEBAR='_data'
SIDEBAR_FILE='sidebar.yml'

#: terminal setup
bold=$(tput bold)
normal=$(tput sgr0)

red=$(tput setaf 1)
green=$(tput setaf 2)
lime=$(tput setaf 190)
reset=$(tput sgr0)

#: IN - Help

##
#   printHelp()
##
printHelp() {
    echo ""
    echo "${normal}$0 ${bold}--project ${normal}<project> ${bold}--output ${normal}<output> ${bold}--main-page ${normal}<main>${reset}"
    echo ""
    echo "    ${lime}${bold}--project${reset}${normal} path where playground's pages are. It will be use to render Jekyll site${reset}"
    echo "    ${lime}${bold}--output${reset}${normal} path where to render the Jekyll site${reset}"
    echo "    ${lime}${bold}--main-page${reset}${normal} the main page in Jekyll file format [optional]${reset}"
    echo "${reset}"
}

#: - Render

##
#   generateDocumentation(String project, String site, String mainPage)
#   - Parameter `project`: path to the project folder.
#   - Parameter `site`: path where to render the Jekyll site.
#   - Parameter `mainPage`: the main page in Jekyll file format (optional).
##
generateDocumentation() {
    local projectPath="$1"
    local sitePath="$2"
    local mainPagePath="$3"

    makeStructure "$projectPath" "$sitePath"
    buildMicrosite "$projectPath" "$sitePath"
    buildMainPage "$mainPagePath" "$sitePath"
}

##
#   buildMicrosite(String project, String site)
#   - Parameter `project`: path to the project folder.
#   - Parameter `site`: path where to render the Jekyll site.
##
buildMicrosite() {
    local projectPath="$1"
    local sitePath="$2/$BASE_JEKYLL"
    local sidebarFilePath="$2/$BASE_SIDEBAR/$SIDEBAR_FILE"

    playgrounds "$projectPath"

    echo "options:" > "$sidebarFilePath" # sidebar start

    for playground in "${playgrounds[@]}"; do

        playgroundName=`echo "$playground" | rev | cut -d'/' -f -1 | cut -d'.' -f 2- | rev`
        playgroundPath="$projectPath/$playground"

        echo -ne "${normal}Rendering jekyll files for ${green}Playground ($playgroundName)${reset}..."
        pagesInPlayground "$playgroundPath"

        echo -e "\n  - title: $playgroundName\n\n    nested_options:\n" >> "$sidebarFilePath" # sidebar title

        for pagePath in "${pagesInPlayground[@]}"; do
            pageName=`echo "$pagePath" | rev | cut -d'/' -f -1 | cut -d'.' -f 2- | rev`
            output="$sitePath/$playgroundName/$pageName"
            permalink="/$BASE_JEKYLL/$playgroundName/$pageName/"

            #clean up - jekyll folders without any whitespace
            output=`echo "$output" | tr -s ' ' '-' | awk '{print tolower($0)}'`
            permalink=`echo "$permalink" | tr -s ' ' '-' | awk '{print tolower($0)}'`

            logFile="$LOG_PATH/$playgroundName-$pageName.log"
            log="$projectPath/$logFile"

            cleanStructure "$output"
            mkdir -p "$output"
            nef-jekyll-page --from "$pagePath" --to "$output" --permalink "$permalink" 1> "$log" 2>&1
            echo -e "        - title: $pageName\n          url: $permalink\n" >> "$sidebarFilePath" # sidebar page

            installed=`grep "RENDER SUCCEEDED" "$log"`
            if [ "${#installed}" -lt 7 ]; then
              echo " ❌"
              echo "${bold}${red}error: ${reset}render page ${bold}$pageName${normal} in playground ${bold}$playgroundName${normal}, review '<project>$logFile' for more information."
              exit 1
            fi
        done

        echo " ✅"
    done
}

##
#   buildMainPage(String mainPage, String sitePath): String
#   - Parameter `mainPage`: the main page in Jekyll file format (optional).
#   - Parameter `sitePath`: path where to render the Jekyll site.
##
buildMainPage() {
    local mainPagePath="$1"
    local sitePath="$2/$BASE_JEKYLL"

    if [ ! -f "$mainPagePath" ]; then
        echo -e "\n---\nlayout: docs\npermalink: /docs/\n---\n\n" >> "$sitePath/README.md"
    else
        cp "$mainPagePath" "$sitePath/README.md"
    fi
}

##
#   makeStructure(String project, String microsite)
#   - Parameter `project`: path to the project folder.
#   - Parameter `microsite`: path to the microsite folder.
##
makeStructure() {
    set +e
    local logPath="$1/$LOG_PATH"  # parameter `project`
    local sitePath="$2"           # parameter `site`
    local sidebarFolderPath="$sitePath/$BASE_SIDEBAR"
    local baseJekyllPath="$sitePath/$BASE_JEKYLL"

    cleanStructure "$logPath"
    cleanStructure "$baseJekyllPath"

    mkdir -p "$logPath"
    mkdir -p "$sidebarFolderPath"
    mkdir -p "$baseJekyllPath"
}


#: - MAIN
set -e

root=`pwd`
projectPath=""
sitePath=""
mainPagePath=""

# Load common nef library
commonNefLibName="nef-common"
commonNefLibPath=$(which "$commonNefLibName")
source "$commonNefLibPath"

# Menu
while [ "$1" != "" ]; do
    case $1 in
        --project | project )     shift; projectPath=$1 ;;
        --output  | output )      shift; sitePath=$1 ;;
        --main-page | mainpage )  shift; mainPagePath=$1 ;;
        --help )                  printHelp $@; exit 1 ;;
        * )                       printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1
    esac
    shift
done

if [ "$projectPath" == "" ]; then
    printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} 'project' argument is required";
    exit 1
fi

if [ "$sitePath" == "" ]; then
    printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} 'output' argument is required";
    exit 1
fi

# Fixes paths
# 1. fix `projectPath`
if [ -d "$root/$projectPath" ]; then
  projectPath="$root/$projectPath"
fi

# 2. fix `mainPagePath`
if [ -f "$root/$mainPagePath" ]; then
  mainPagePath="$root/$mainPagePath"
fi

# 3. fix `sitePath`
if [ -d "$root/$sitePath" ]; then
  sitePath="$root/$sitePath"
else
  mkdir -p "$sitePath"

  if [ ${sitePath:0:1} = "." ]; then
      sitePath="$root/$sitePath"
  fi
fi

generateDocumentation "$projectPath" "$sitePath" "$mainPagePath"
