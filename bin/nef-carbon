#!/bin/bash

LOG_PATH="/nef/carbon"

#: terminal setup
bold=$(tput bold)
normal=$(tput sgr0)

red=$(tput setaf 1)
green=$(tput setaf 2)
lime=$(tput setaf 190)
reset=$(tput sgr0)

#: IN - Help

##
#   printHelp()
##
printHelp() {
    echo ""
    echo "${normal}$0 ${bold}--project ${normal}<project> ${bold}--output ${normal}<output> ${reset}"
    echo ""
    echo "    Parameters"
    echo ""
    echo "    ${lime}${bold}--project${reset}${normal} path where playground's pages are.${reset}"
    echo "    ${lime}${bold}--output${reset}${normal} path where Carbon snippets are saved to.${reset}"
    echo ""
    echo "    Options"
    echo ""
    echo "    ${lime}--background${reset} background color in hexadecimal."
    echo "    ${lime}--theme${reset} carbon's theme."
    echo "    ${lime}--size${reset} export file size [1-5]."
    echo "    ${lime}--font${reset} carbon's font type."
    echo "    ${lime}--lines${reset} shows/hides lines of code [true | false]."
    echo "    ${lime}--watermark${reset} shows/hides the watermark [true | false]."
    echo "${reset}"
}

#: - Render

##
#   generateCarbon(String projectPath, String outputPath, background: String, theme: String, size: String, font: String, lines: String, watermark: String)
#   - Parameter `project`: path to the project folder.
#   - Parameter `outputPath`: path where Carbon snippets are saved to.
#
#   Options:
#   - Parameter `background`: background color in hexadecimal. ex. 'bow'
#   - Parameter `theme`: carbon's theme. ex. 'firaCode'
#   - Parameter `size`: export file size [1-5]. ex. '4'
#   - Parameter `font`: carbon's font type. ex. 'ubuntuMono'
#   - Parameter `lines`: shows/hides lines of code [true | false]. ex. 'false'
#   - Parameter `watermark`: shows/hides the watermark [true | false]. ex. 'true'
##
generateCarbon() {
    local projectPath="$1" # parameter 'projectPath'
    local outputPath="$2"  # parameter 'outputPath'
    local background="$3"  # parameter 'background'
    local theme="$4"       # parameter 'theme'
    local size="$5"        # parameter 'size'
    local font="$6"        # parameter 'font'
    local lines="$7"       # parameter 'lines'
    local watermark="$8"   # parameter 'watermark'

    makeStructure "$projectPath" "$outputPath"
    buildCarbon "$projectPath" "$outputPath" "$background" "$theme" "$size" "$font" "$lines" "$watermark"
}

##
#   buildCarbon(String projectPath, String outputPath, background: String, theme: String, size: String, font: String, lines: String, watermark: String)
#   - Parameter `projectPath`: path to the project folder.
#   - Parameter `outputPath`: path where Carbon snippets are saved to.
#   - Parameters: options for carbon.
##
buildCarbon() {
    local projectPath="$1" # parameter 'projectPath'
    local outputPath="$2"  # parameter 'outputPath'

    local background="$3"  # parameter 'background'
    local theme="$4"       # parameter 'theme'
    local size="$5"        # parameter 'size'
    local font="$6"        # parameter 'font'
    local lines="$7"       # parameter 'lines'
    local watermark="$8"   # parameter 'watermark'

    playgrounds "$projectPath"

    for playgroundPath in "${playgroundsPaths[@]}"; do
        playgroundName=`echo "$playgroundPath" | rev | cut -d'/' -f -1 | cut -d'.' -f 2- | rev`
        output="$outputPath/$playgroundName"

        echo "${normal}Downloading Carbon's snippets for ${green}$playgroundName${reset}"

        checkOutputNotSameInput "$output" "$projectPath"
        cleanStructure "$output"
        mkdir -pv "$output"
        pagesInPlayground "$playgroundPath"

        for pagePath in "${pagesInPlayground[@]}"; do
            pageName=`echo "$pagePath" | rev | cut -d'/' -f -1 | cut -d'.' -f 2- | rev`
            log="$projectPath/$LOG_PATH/$playgroundName-$pageName.log"

            echo -ne "    ${normal}| code snippets for ${green}$pageName${reset}..."
            nef-carbon-page --from "$pagePath" --to "$output" --background "$background" --theme "$theme" --size "$size" --font "$font" --show-lines "$lines" --show-watermark "$watermark" 1> "$log" 2>&1

            installed=`grep "RENDER SUCCEEDED" "$log"`
            if [ "${#installed}" -lt 7 ]; then
              echo " ❌"
              echo "${bold}${red}error: ${reset}donwloading carbon snippets from page ${bold}$pageName${normal} in playground ${bold}$playgroundName${normal}, review '$log' for more information."
              exit 1
            else
              echo " ✅"
            fi
        done

    done
}

##
#   makeStructure(String project, String outputPath)
#   - Parameter `project`: path to the project folder.
#   - Parameter `outputPath`: path where Carbon snippets are saved to.
##
makeStructure() {
    set +e
    local logPath="$1/$LOG_PATH"  # parameter `project`
    local outputPath="$2"         # parameter `outputPath`

    cleanStructure "$outputPath/*/*.png"
    mkdir -p "$logPath"
    mkdir -p "$outputPath"
}

#: - MAIN
set -e

# Load common nef library
commonNefLibName="nef-common"
commonNefLibPath=$(which "$commonNefLibName")
source "$commonNefLibPath"

# Menu
root=`pwd`
projectPath=""
outputPath=""

background="nef"
theme="dracula"
size="2"
font="firaCode"
lines="true"
watermark="true"

while [ "$1" != "" ]; do
    case $1 in
        --project | project )  shift; projectPath=$1 ;;
        --output  | output )   shift; outputPath=$1 ;;
        --background)          shift; background=$1 ;;
        --theme)               shift; theme=$1 ;;
        --size)                shift; size=$1 ;;
        --font)                shift; font=$1 ;;
        --lines)               shift; lines=$1 ;;
        --watermark)           shift; watermark=$1 ;;
        --help )               printHelp $@; exit 1 ;;
        * )                    printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1
    esac
    shift
done

if [ "$projectPath" == "" ]; then
    printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} 'project' argument is required";
    exit 1
fi

if [ "$outputPath" == "" ]; then
    printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} 'output' argument is required";
    exit 1
fi

# Fixes paths
projectPath=$(absoluteInputDirectoryPath "$root" "$projectPath")
outputPath=$(absoluteOutputDirectoryPath "$root" "$outputPath")

# Donwload Carbon code snippets
generateCarbon "$projectPath" "$outputPath" "$background" "$theme" "$size" "$font" "$lines" "$watermark"
