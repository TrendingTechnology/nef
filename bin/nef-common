#!/bin/bash

##
#   playgrounds(String folder)
#   - Parameter `folder`: path to the project folder.
#   - Return `playgrounds` list of the playgrounds given a project path.
##
playgrounds() {
    local path="$1"   # parameter `folder`

    workspace=$(workspaceForProjectPath "$1")
    content="$workspace/contents.xcworkspacedata"

    dependencies="awk -F'location = \"group:' '{print \$2}'"
    cleanUp="rev | cut -d'\"' -f 2- | rev | grep playground"
    playgrounds=$(eval cat "\"$content\" | $dependencies | $cleanUp" )

    playgrounds=`echo "$playgrounds" | tr -s '\n' '\t'` # '\n' -> '\t'
    IFS=$'\t' read -r -a playgrounds <<< "$playgrounds" # split by '\t'

    declare -p playgrounds 1>/dev/null 2>/dev/null
}

##
#   pagesInPlayground(String playground)
#   - Parameter `playground`: path to the playground where to get its pages.
#   - Return `pagesInPlayground` list of the playground's pages given a playground.
##
pagesInPlayground() {
    local playgroundPath="$1" # parameter `playground`
    if [ ! -d "$playgroundPath" ]; then
        echo " ❌"
        echo "${bold}${red}error: ${reset}can not open '$playgroundPath'. Please, review the path and it is linked correctly in the project."
        exit 1
    fi

    cd "$playgroundPath"
    pages=()

    dependencies="awk -F'page name=' '{print \$2}'"
    cleanUp="cut -d'/' -f -1"
    pagesNames=$(eval cat "contents.xcplayground | $dependencies | $cleanUp" 2>/dev/null)

    pagesNames=`echo "$pagesNames" | tr -s "\'" '\n' | tr -s '\n' '\t'` # ' -> \n -> \t
    IFS=$'\t' read -r -a pagesNames <<< "$pagesNames"                   # split by \t

    # A. in case `content.xcplayground` has not pages - get from folder `Pages`
    if [ "${#pagesNames}" -eq 0 ]; then
        pagesNames=`ls "Pages" | grep xcplaygroundpage`
        pagesNames=`echo "$pagesNames" | tr -s '\n' '\t'`
        IFS=$'\t' read -r -a pages <<< "$pagesNames"

    # B. get pages from `contents.xcplayground`
    else
      for page in "${pagesNames[@]}"; do
          pages+=("$page.xcplaygroundpage")
      done
    fi

    # build pages path
    pagesInPlayground=()
    for page in "${pages[@]}"; do
        pagesInPlayground+=("$playgroundPath/Pages/$page")
    done

    declare -p pagesInPlayground 1>/dev/null 2>/dev/null
}

##
#   cleanStructure(String folder)
#   - Parameter `folder`: path to the folder to clean up.
##
cleanStructure() {
  set +e
  local folder="$1"  # parameter `folder`
  rm -rf "$folder" 1>/dev/null 2>/dev/null
}


###: - Internal methods

##
#   workspaceForProjectPath(String folder, String projectPath): String
#   - Parameter `folder`: path to the project folder.
#   - Parameter `projectPath`: path to the *.pbxproj file.
#   - Return `workspace` path given a project path
##
workspaceForProjectPath() {
    local path="$1"         # parameter `folder`
    local log="$1/$LOG_PATH/workspace.log"
    cd "$path"

    workspace=`ls | grep xcworkspace`
    numberOfWorkspaces=`echo "$workspace" | wc -l`
    workspacePath="$path/$workspace"

    if [ "$numberOfWorkspaces" -ne 1 ]; then
        echo "[!] error: found more than 1 workspace (total:$numberOfWorkspaces): '$workspace'" > "$log"
        exit 1
    elif [ -d "$workspacePath" ]; then
        echo $workspacePath
    else
        echo "[!] error: not found any workspace in root project '$path'" > "$log"
        exit 1
    fi
}
