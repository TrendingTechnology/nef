#!/bin/bash

##
#   playgrounds(String folder) throws
#   - Parameter `folder`: path to the project folder.
#   - Return `playgrounds` list of the playgrounds given a project path.
##
playgrounds() {
    local root="$1"   # parameter `folder`

    local workspace=$(workspaceForProjectPath "$1")
    local content="$workspace/contents.xcworkspacedata"
    checkIsWorkspaceValid "$workspace"

    local dependencies="awk -F'location = \"group:' '{print \$2}'"
    local cleanUp="rev | cut -d'\"' -f 2- | rev | grep playground"
    local playgrounds=$(eval cat "\"$content\" | $dependencies | $cleanUp" )

    local playgrounds=`echo "$playgrounds" | tr -s '\n' '\t'` # '\n' -> '\t'
    IFS=$'\t' read -r -a playgrounds <<< "$playgrounds" # split by '\t'

    # build playground path
    playgroundsPaths=()
    for playground in "${playgrounds[@]}"; do
        if [ -d "$root/$playground" ]; then # is it relative path?
            playgroundsPaths+=("$root/$playground")
        elif [ -d "$playground" ]; then     # is it a absolute path?
            playgroundsPaths+=("$playground")
        else
          echo " ❌"
          echo "${bold}${red}error: ${reset}file '$playground' does not exist. Please, review if this playground is linked properly."
          exit 1
        fi
    done

    declare -p playgroundsPaths 1>/dev/null 2>/dev/null
}

##
#   pagesInPlayground(String playground) throws
#   - Parameter `playground`: path to the playground where to get its pages.
#   - Return `pagesInPlayground` list of the playground's pages given a playground.
##
pagesInPlayground() {
    local playgroundPath="$1" # parameter `playground`
    if [ ! -d "$playgroundPath" ]; then
        echo " ❌"
        echo "${bold}${red}error: ${reset}can not open '$playgroundPath'. Please, review the path and it is linked correctly in the project."
        exit 1
    fi

    cd "$playgroundPath"
    local pages=()

    local dependencies="awk -F'page name=' '{print \$2}'"
    local cleanUp="cut -d'/' -f -1"
    local pagesNames=$(eval cat "contents.xcplayground | $dependencies | $cleanUp" 2>/dev/null)

    local pagesNames=`echo "$pagesNames" | tr -s "\'" '\n' | tr -s '\n' '\t'` # ' -> \n -> \t
    IFS=$'\t' read -r -a pagesNames <<< "$pagesNames"                   # split by \t

    # A. in case `content.xcplayground` has not pages - get from folder `Pages`
    if [ "${#pagesNames}" -eq 0 ]; then
        pagesNames=`ls "Pages" | grep xcplaygroundpage`
        pagesNames=`echo "$pagesNames" | tr -s '\n' '\t'`
        IFS=$'\t' read -r -a pages <<< "$pagesNames"

    # B. get pages from `contents.xcplayground`
    else
      for page in "${pagesNames[@]}"; do
          pages+=("$page.xcplaygroundpage")
      done
    fi

    # build pages path
    pagesInPlayground=()
    for page in "${pages[@]}"; do
        pagesInPlayground+=("$playgroundPath/Pages/$page")
    done

    declare -p pagesInPlayground 1>/dev/null 2>/dev/null
}

##
#   cleanStructure(String folder)
#   - Parameter `folder`: path to the folder to clean up.
##
cleanStructure() {
  set +e
  local folder="$1"  # parameter `folder`
  rm -rf $folder 1>/dev/null 2>/dev/null
}

##
#   absoluteFilePath(String root, String filePath)
#   - Parameter `root`: path to the root directory
#   - Parameter `filePath`: path to file
#   - Return: the absolute file path
##
absoluteFilePath() {
  local root="$1"
  local filePath="$2"

  if [ -f "$root/$filePath" ]; then # is it 'relative path'?
    filePath="$root/$filePath"
  fi

  echo "$filePath"
}

##
#   absoluteInputDirectoryPath(String root, String folderPath)
#   - Parameter `root`: path to the root directory
#   - Parameter `folderPath`: path to directory
#   - Return: the absolute directory path
##
absoluteInputDirectoryPath() {
  local root="$1"
  local folderPath="$2"

  if [ -d "$root/$folderPath" ]; then # is it 'relative path'?
    folderPath="$root/$folderPath"
  fi

  echo "$folderPath"
}

##
#   absoluteOutputDirectoryPath(String root, String folderPath)
#   - Parameter `root`: path to the root directory
#   - Parameter `folderPath`: path to directory
#   - Return: the absolute directory path
##
absoluteOutputDirectoryPath() {
  local root="$1"
  local folderPath="$2"

  # A. is it 'relative path'?
  if [ -d "$root/$folderPath" ]; then
    if [ "$folderPath" = "." ]; then
      folderPath="$root/nef-output"
    else
      folderPath="$root/$folderPath"
    fi

  # B. in another case
  else
    mkdir -p "$folderPath"

    if [ ${folderPath:0:1} = "." ] || [ -d "$root/$folderPath" ]; then
        folderPath="$root/$folderPath"
    fi
  fi

  echo "$folderPath"
}

##
#   checkOutputNotSameInput(String outputPath, String projectPath) throws
#   - Parameter `outputPath`: path to output directory - where to build nef project
#   - Parameter `projectPath`: path to the path directory
##
checkOutputNotSameInput() {
  local outputPath="$1"
  local projectPath="$2"
  local root=$(echo "$projectPath" | rev | cut -d'/' -f2- | rev)

  local lsOutput=$(ls "$outputPath" 2>&1)
  local lsProject=$(ls "$projectPath" 2>&1)

  if [ "$lsOutput" == "$lsProject" ]; then
      echo ""
      echo "${bold}[!] ${normal}${red}error:${reset} 'output' path could not be the same path as 'project'. [${bold}$projectPath${reset}]"
      echo "${bold}Please, select different directory for 'output'.${reset} ex. $root/output-nef"
      echo ""
      exit 1
  fi
}

###: - Internal methods

##
#   workspaceForProjectPath(String folder, String projectPath): String
#   - Parameter `folder`: path to the project folder.
#   - Parameter `projectPath`: path to the *.pbxproj file.
#   - Return `workspace` path given a project path
##
workspaceForProjectPath() {
    local path="$1"         # parameter `folder`
    local log="$1/$LOG_PATH/workspace.log"
    cd "$path"

    local workspace=$(ls | grep xcworkspace)
    local workspacePath="$path/$workspace"

    echo $workspacePath
}

checkIsWorkspaceValid() {
    local workspacePath="$1" # parameter `workspace`
    local numberOfWorkspaces=$(echo "$workspace" | wc -l)

    if [ "$numberOfWorkspaces" -ne 1 ]; then
        echo "[!] error: found more than 1 workspace (total:$numberOfWorkspaces): '$workspace'" > "$log"
        exit 1
    elif ! [ -d "$workspacePath" ]; then
        echo "[!] error: not found any workspace in root project '$path'" > "$log"
        exit 1
    fi
}
