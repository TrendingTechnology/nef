#!/bin/bash

DEFAULT_PLAYGROUND="BowPlayground"
BOW_TAGS="https://api.github.com/repos/bow-swift/bow/tags"
NEF_ZIP="https://github.com/bow-swift/nef/archive/master.zip"

#: terminal setup
bold=$(tput bold)
normal=$(tput sgr0)

red=$(tput setaf 1)
green=$(tput setaf 2)
lime=$(tput setaf 190)
reset=$(tput sgr0)

#: IN - Help

##
#   printHelp()
##
printHelp() {
    latestVersion=$(lastestBowVersion)

    echo ""
    echo "${normal}nef-payground ${bold}--name ${normal}<project> ${bold}--platform ${normal}<ios|osx> ${bold}--bow-version ${normal}<number format: 0.0.0> ${bold}--bow-branch ${normal}<branch> ${bold}--podfile ${normal}<path> ${bold}--cartfile ${normal}<path>"
    echo ""
    echo "    ${lime}${bold}--name${reset}${normal} create a playground project using this name [default: $DEFAULT_PLAYGROUND]"
    echo "    ${lime}${bold}--platform${reset}${normal} create a iOS or macOS playground project [default: ios, values: ios | osx]"
    echo ""
    echo "    ${lime}${bold}--bow-version${reset}${normal} Bow's version to use [default: $latestVersion]"
    echo "    ${lime}${bold}--bow-branch${reset}${normal} Bow's branch to use [optional]"
    echo "    ${lime}${bold}--podfile${reset}${normal} podfile to use in playground [optional]"
    echo "    ${lime}${bold}--cartfile${reset}${normal} cartfile to use in playground [optional]"
    echo "${reset}"
}

#: - Playground

##
#   setDependency(String projectFolder, String projectName, String platform, String version, String branch, String cartfile, String podfile) throws
#   - Parameter `projectFolder`: path to the project folder.
#   - Parameter `projectName`: the project name.
#   - Parameter `platform`: set this platform to playground.
#   - Parameter `version`: Bow's version which update Podfile.
#   - Parameter `branch`: Bow's branch which update Podfile.
#   - Parameter `cartfile`
#   - Parameter `podfile`
##
setDependency() {
  cd "$1"
  local projectFolder="$1" # parameter `projectFolder`
  local projectName="$2"   # parameter `projectName`
  local platform="$3"      # parameter `platform`

  local version="$4"       # parameter `version`
  local branch="$5"        # parameter `branch`
  local cartfile="$6"      # parameter `cartfile`
  local podfile="$7"       # parameter `podfile`

  if [ "$podfile" != "" ] && [ -f "$podfile" ]; then
      checkCocoaPods
      setPlaygroundPlatform "$projectFolder" "$projectName" "$platform" "cocoapods"
      setCocoaPodsDependency "$projectFolder" "$projectName" "$platform" "$podfile"
      setDefaultWorkspace "$projectFolder"
  elif [ "$cartfile" != "" ] && [ -f "$cartfile" ]; then
      checkCarthage
      setPlaygroundPlatform "$projectFolder" "$projectName" "$platform" "carthage"
      setCarthageDependency "$projectFolder" "$projectName" "$platform" "$cartfile"
  elif [ "$branch" != "" ]; then
      checkCocoaPods
      setPlaygroundPlatform "$projectFolder" "$projectName" "$platform" "cocoapods"
      setBowBranchDependency "$projectFolder" "$projectName" "$platform" "$branch"
      setDefaultWorkspace "$projectFolder"
  else # version
      checkCocoaPods
      setPlaygroundPlatform "$projectFolder" "$projectName" "$platform" "cocoapods"
      setBowVersionDependency "$projectFolder" "$projectName" "$platform" "$version"
      setDefaultWorkspace "$projectFolder"
  fi
}

setCarthageDependency() {
    local projectFolder="$1" # parameter `projectFolder`
    local projectName="$2"   # parameter `projectName`
    local platform="$3"      # parameter `platform`
    local cartfile="$4"      # parameter `cartfile`

    podfilePath="$projectFolder/Podfile"
    cartfilePath="$projectFolder/Cartfile"
    cartfileName=`echo "$cartfile" | rev | cut -d'/' -f -1 | rev`

    echo -ne "${normal}Updating${green} carfile ($cartfileName)${reset}..."

    rm -rf "$podfilePath" 1>/dev/null 2>/dev/null
    rm -rf "$cartfilePath" 1>/dev/null 2>/dev/null
    cp "$cartfile" "$cartfilePath" 1>/dev/null 2>/dev/null

    echo " ✅"
}

setCocoaPodsDependency() {
    local projectFolder="$1" # parameter `projectFolder`
    local projectName="$2"   # parameter `projectName`
    local platform="$3"      # parameter `platform`
    local podfile="$4"       # parameter `podfile`

    podfilePath="$projectFolder/Podfile"
    podfileName=`echo "$podfile" | rev | cut -d'/' -f -1 | rev`

    echo -ne "${normal}Updating${green} podfile ($podfileName)${reset}..."

    rm -rf "$podfilePath" 1>/dev/null 2>/dev/null
    cp "$podfile" "$podfilePath" 1>/dev/null 2>/dev/null

    target=`cat "$podfilePath" | grep "target"`
    sed -i '' s/"$target"/"target '$projectName' do"/g "$podfilePath"

    echo " ✅"
}

setBowBranchDependency() {
    local projectFolder="$1" # parameter `projectFolder`
    local projectName="$2"   # parameter `projectName`
    local platform="$3"      # parameter `platform`
    local branch="$4"        # parameter `branch`
    local podfilePath="$projectFolder/Podfile"

    echo -ne "${normal}Updating${green} branch ($branch)${reset}..."

    if [ -f "$podfilePath" ]; then
        branch=$(echo "$branch" | sed 's/\//\\\//g')
        sed -i '' s/"\"~> 0.0.0\""/":git => 'https\:\/\/github.com\/bow-swift\/bow.git', :branch => '$branch'"/g "$podfilePath"
        echo " ✅"
    else
        echo " ❌"
        echo "[!] ${bold}${red}error: ${reset}can not find file '$podfilePath' to set the Bow's branch to '$branch'"
        exit 1
    fi
}

setBowVersionDependency() {
    local projectFolder="$1" # parameter `projectFolder`
    local projectName="$2"   # parameter `projectName`
    local platform="$3"      # parameter `platform`
    local version="$4"       # parameter `version`
    local podfilePath="$projectFolder/Podfile"

    echo -ne "${normal}Updating${green} version ($version)${reset}..."

    if [ -f "$podfilePath" ]; then
        sed -i '' s/"~> 0.0.0"/"~> $version"/g "$podfilePath"
        echo " ✅"
    else
        echo " ❌"
        echo "[!] ${bold}${red}error: ${reset}can not find file '$podfilePath' to set the Bow's version to '$version'"
        exit 1
    fi
}

setDefaultWorkspace() {
    local projectFolder="$1" # parameter `projectFolder`
    podfilePath="$projectFolder/Podfile"

    ! [ -f "$podfilePath" ] && continue

    echo -ne "${normal}Updating podfile with ${green}default workspace${reset}..."
    echo "workspace 'nef'" >> $podfilePath
    echo " ✅"
}

##
#   checkCocoaPods() throws
##
checkCocoaPods() {
  totalCommandsPod=$(command -v pod | wc -l)
  if [ $totalCommandsPod -eq 0 ]; then
    echo "[!] ${bold}${red}error: ${reset}required cocoapods. Please ${bold}install cocoapods${reset}. Run: 'sudo gem install cocoapods'"
    exit 1
  fi

  requiredVersion='1.6.1'
  podVersion=$(pod --version)
  minorPodVersionRequired=(`printf "$podVersion\n$requiredVersion\n" | sort`)

  if [ "$minorPodVersionRequired" != "$requiredVersion" ]; then
    echo "[!] ${bold}${red}error: ${reset}required cocoapods version ${bold}'$requiredVersion'${normal} [found: ${red}'$podVersion'${reset}]"
    echo ""
    echo "Please ${bold}update your cocoapods${reset}. Run: 'sudo gem install cocoapods'"
    echo ""
    exit 1
  fi
}

checkCarthage() {
  totalCommandsPod=$(command -v carthage | wc -l)

  if [ $totalCommandsPod -eq 0 ]; then
    echo "[!] ${bold}${red}error: ${reset}required carthage. Please ${bold}install carthage${reset}. Run: 'brew install carthage'"
    exit 1
  fi
}

##
#   setPlaygroundPlatform(String projectFolder, String projectName, String platform, String dependencyManager) throws
#   - Parameter `projectFolder`: path to the project folder.
#   - Parameter `projectName`: the project name.
#   - Parameter `platform`: set this platform to playground.
#   - Parameter `dependencyManager`: set the dependency manager.
##
setPlaygroundPlatform() {
  local projectFolder="$1" # parameter `projectFolder`
  local projectName="$2"   # parameter `projectName`
  local platform="$3"      # parameter `platform`
  local dependency="$4"    # parameter `dependencyManager`

  echo -ne "${normal}Set ${green}$projectName target${reset} to "

  if [ "ios" = $platform ] || [ "osx" = $platform ]; then
    mv "$projectFolder/$platform/$dependency"/* "$projectFolder"
    rm -rf "$projectFolder/osx"
    rm -rf "$projectFolder/ios"
    rm -rf "$projectFolder/cocoapods"
    rm -rf "$projectFolder/carthage"

    [ "ios" = $platform ] && echo "${green}iOS${reset} ✅" || echo "${green}macOS${reset} ✅"
  else
    echo " ❌"
    echo "[!] ${bold}${red}error: ${reset}--platform invalid value '$platform'; you must set platform to 'ios' or 'osx'."
    exit 1
  fi
}

##
#   lastestBowVersion(): String
#   - Return: latest Bow version
##
lastestBowVersion() {
  version=$(eval curl --silent \"$BOW_TAGS\" | grep name | tr -d "\n" | cut -d',' -f 1 | awk -F': "' '{print $2}' | awk -F'"' '{print $1}')
  echo $version
}

##
#   playground(String parent, String projecFolder, String projecName)
#   - Parameter `parent`: path to the root project.
#   - Parameter `projectFolder`: path to the project.
#   - Parameter `projecName`: playground name.
##
playground() {
  set +e
  local project="$1"       # parameter `parent`
  local projectFolder="$2" # parameter `projectFolder`
  local projectName="$3"   # parameter `projecName`

  echo -ne "${normal}Installing ${green}Playground ($projectName)${reset}..."

  if [ -d "$project" ]; then
    echo " ❌"
    echo "[!] ${bold}${red}error: ${reset}destination path '$projectName' already exists."
    exit 1
  fi

  installPlaygroundTemplate "$project" "$projectFolder" "$projectName"
}

##
#   installPlaygroundTemplate(String parent, String projecFolder, String projecName)
#   - Parameter `parent`: path to the root project.
#   - Parameter `projectFolder`: path to the project.
#   - Parameter `projecName`: playground name.
##
installPlaygroundTemplate() {
  local project="$1"       # parameter `parent`
  local projectFolder="$2" # parameter `projectFolder`
  local projectName="$3"   # parameter `projecName`

  local projectPlayground="$projectName.app"
  local projectTemplate="$project.1"
  local log="$projectTemplate/nef/playground/init-playground.log"
  local tempFolderName="template-master"

  makeStructure "$projectTemplate"
  cd "$projectTemplate"

  # download project
  echo ">----------------------------------------- download GitHub project" >> "$log"
  curl -LkSs $NEF_ZIP -o master.zip 1>> "$log" 2>&1
  echo ">----------------------------------------- unzip GitHub project" >> "$log"
  unzip master.zip -d $tempFolderName 1>> "$log" 2>&1
  rm *.zip 1>> "$log" 2>&1
  echo ">----------------------------------------- move files to parent :: $projectTemplate" >> "$log"
  mv $tempFolderName/*/* . 1>> "$log" 2>&1
  rm -rf $tempFolderName 1>> "$log" 2>&1

  # install template
  echo ">----------------------------------------- installing playground template" >> "$log"
  ruby setup/nef.rb "$projectName" 1>> "$log" 2>&1

  # check errors
  rubyError=`grep "ruby:" "$log"`
  curlError=`grep "curl:" "$log"`
  otherErrors=`grep "[!]" "$log"`

  if [ "${#rubyError}" -gt 0 ] || [ "${#curlError}" -gt 0 ] || [ "${#otherErrors}" -gt 0 ]; then
    echo " ❌"
    echo "[!] ${bold}${red}error: ${reset}review '$log' for more information."
    exit 1
  else # create nef-playground
    mv "nef" "$projectPlayground"
    mv "$projectTemplate/$projectPlayground" ../
    mv $projectTemplate/* "$projectFolder"/
    clean "$projectTemplate"
    echo " ✅"
  fi
}

##
#   makeStructure(String folder)
#   - Parameter `folder`: path to the project folder.
##
makeStructure() {
  set +e
  local project="$1"  # parameter `folder`

  rm -rf "$project/nef/playground" 1>/dev/null 2>/dev/null
  mkdir -p "$project/nef/playground"
}

clean() {
  set +e
  local project="$1"  # parameter `folder`
  rm -rf "$project" 1>/dev/null 2>/dev/null
}

#: - MAIN
set -e

root=`pwd`
projectName="$DEFAULT_PLAYGROUND"
version=$(lastestBowVersion)
platform="ios"
branch=""
podfile=""
cartfile=""

while [ "$1" != "" ]; do
    case $1 in
        --bow-version | version )    shift; version=$1 ;;
        --bow-branch | branch )      shift; branch=$1 ;;
        --podfile  | podfile )       shift; podfile=$1 ;;
        --cartfile | cartfile )      shift; cartfile=$1 ;;

        --name | name )              shift; projectName=$1 ;;
        --playground | playground )  shift; projectName=$1 ;;
        --platform | platform )      shift; platform=$1 ;;

        -h | --help )                printHelp $@; exit 1 ;;
        * )                          printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1
    esac
    shift
done

projectName="$projectName"
project="$root/$projectName.app"
projectFolder="$project/Contents/MacOS"
cartfilePath="$root/$cartfile"
podfilePath="$root/$podfile"

playground "$project" "$projectFolder" "$projectName"
setDependency "$projectFolder" "$projectName" "$platform" "$version" "$branch" "$cartfilePath" "$podfilePath"
