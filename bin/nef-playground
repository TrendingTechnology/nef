#!/bin/bash

DEFAULT_PLAYGROUND="BowPlayground"
BOW_TAGS="https://api.github.com/repos/bow-swift/bow/tags"
NEF_TEMPLATE="https://github.com/bow-swift/nef"

#: terminal setup
bold=$(tput bold)
normal=$(tput sgr0)

red=$(tput setaf 1)
green=$(tput setaf 2)
lime=$(tput setaf 190)
reset=$(tput sgr0)

#: IN - Help

##
#   printHelp()
##
printHelp() {
    latestVersion=$(lastestBowVersion)

    echo ""
    echo "${normal}nef-payground ${bold}--name ${normal}<project> ${bold}--bow-version ${normal}<number format: 0.0.0> ${bold}--bow-branch ${normal}<branch> ${bold}--podfile ${normal}<branch>"
    echo ""
    echo "    ${lime}${bold}--name${reset}${normal} create a playground project using this name [default: $DEFAULT_PLAYGROUND]"
    echo ""
    echo "    ${lime}${bold}--bow-version${reset}${normal} Bow's version to use [default: $latestVersion]"
    echo "    ${lime}${bold}--bow-branch${reset}${normal} Bow's branch to use [optional]"
    echo "    ${lime}${bold}--podfile${reset}${normal} podfile to use in playground [optional]"
    echo "${reset}"
}

#: - Playground

##
#   setDependency(String projectFolder, String projectName, String version, String branch, String podfile)
#   - Parameter `projectFolder`: path to the project folder.
#   - Parameter `projectName`: the project name.
#   - Parameter `version`: Bow's version which update Podfile.
#   - Parameter `branch`: Bow's branch which update Podfile.
#   - Parameter `podfile`
##
setDependency() {
  local projectFolder="$1" # parameter `projectFolder`
  local projectName="$2"   # parameter `projectName`
  local version="$3"       # parameter `version`
  local branch="$4"        # parameter `branch`
  local podfile="$5"       # parameter `podfile`
  local podfilePath="$projectFolder/Podfile"

  setPlaygroundPlatform "$projectFolder" "$projectName" "$podfile"

  echo -ne "${normal}Updating ${green}"

  if [ -f "$podfilePath" ]; then
      # A. update Podfile using `branch`
      if [ "$branch" != "" ]; then
          echo -ne "branch ($branch)${reset}..."
          branch=$(echo "$branch" | sed 's/\//\\\//g')
          sed -i '' s/"\"~> 0.0.0\""/":git => 'https\:\/\/github.com\/bow-swift\/bow.git', :branch => '$branch'"/g "$podfilePath"
          echo " ✅"

      # B. update Podfile using 'podfile'
      elif [ "$podfile" != "" ] & [ -f "$podfile" ]; then
          podfileName=`echo "$podfile" | rev | cut -d'/' -f -1 | rev`
          echo -ne "podfile ($podfileName)${reset}..."

          rm -rf "$podfilePath" 1>/dev/null 2>/dev/null
          cp "$podfile" "$podfilePath" 1>/dev/null 2>/dev/null

          target=`cat "$podfilePath" | grep "target"`
          sed -i '' s/"$target"/"target '$projectName' do"/g "$podfilePath"

          echo " ✅"

      # C. update Podfile using `version`
      else
          echo -ne "version ($version)${reset}..."
          sed -i '' s/"~> 0.0.0"/"~> $version"/g "$podfilePath"
          echo " ✅"
      fi
  else
      echo " ❌"
      echo "[!] ${bold}${red}error: ${reset}can not find file '$podfilePath'"
      exit 1
  fi
}

##
#   setPlaygroundPlatform(String projectFolder, String projectName, String podfilePath)
#   - Parameter `projectFolder`: path to the project folder.
#   - Parameter `projectName`: the project name.
#   - Parameter `podfile`
##
setPlaygroundPlatform() {
  local projectFolder="$1" # parameter `projectFolder`
  local projectName="$2"   # parameter `projectName`
  local podfile="$3"       # parameter `podfile`
  local podfilePath=""

  if [ "$podfile" != "" ] & [ -f "$podfile" ]; then
    podfilePath="$podfile"
  else
    podfilePath="$projectFolder/Podfile"
  fi

  echo -ne "${normal}Set ${green}$projectName target${reset} to"

  platform=`cat "$podfilePath" | grep -m 1 "platform" | cut -d':' -f 2 | cut -d',' -f 1`

  if [ "ios" = $platform ]; then
    rm -rf "$projectFolder/osx"
    mv "$projectFolder"/ios/* "$projectFolder"
    rm -rf "$projectFolder/ios"
    echo " ${green}iOS${reset} ✅"

  elif [ "osx" = $platform ]; then
    rm -rf "$projectFolder/ios" 1>/dev/null 2>/dev/null
    mv "$projectFolder"/osx/* "$projectFolder"
    rm -rf "$projectFolder/osx" 1>/dev/null 2>/dev/null
    echo " ${green}macOS${reset} ✅"

  else
    echo " ❌"
    echo "[!] ${bold}${red}error: ${reset}please define a platform (ios | osx) in podfile '$podfilePath'"
    exit 1
  fi
}

##
#   lastestBowVersion(): String
#   - Return: latest Bow version
##
lastestBowVersion() {
  version=$(eval curl --silent \"$BOW_TAGS\" | grep name | tr -d "\n" | cut -d',' -f 1 | awk -F': "' '{print $2}' | awk -F'"' '{print $1}')
  echo $version
}

##
#   playground(String parent, String projecName)
#   - Parameter `parent`: path to the project parent.
#   - Parameter `projecName`: playground name.
##
playground() {
  set +e

  local root="$1"          # parameter `parent`
  local projectName="$2"   # parameter `projecName`
  local projectFolder="$root/$projectName"
  local tempLog="$root/init-playground.log"
  local log="$projectFolder/nef/playground/init-playground.log"

  cd "$root"
  echo -ne "${normal}Installing ${green}Playground ($projectName)${reset}..."

  if [ -d "$projectName" ]; then
    echo " ❌"
    echo "[!] ${bold}${red}error: ${reset}destination path '$projectName' already exists and is not an empty directory."
    exit 1
  fi

  pod lib create "$projectName" --template-url="$NEF_TEMPLATE" 1> "$tempLog" 2>&1
  makeStructure "$projectFolder"
  mv "$tempLog" "$log"

  error=`grep "Errno:" "$log"`
  fatalError=`grep "fatal:" "$log"`
  gemError=`grep "LoadError" "$log"`
  otherErrors=`grep "[!]" "$log"`

  if [ "${#error}" -gt 0 ] || [ "${#fatalError}" -gt 0 ] || [ "${#gemError}" -gt 0 ] || [ "${#otherErrors}" -gt 0 ]; then
    echo " ❌"
    echo "[!] ${bold}${red}error: ${reset}review '$log' for more information."
    exit 1
  else
    echo " ✅"
  fi
}


##
#   makeStructure(String folder)
#   - Parameter `folder`: path to the project folder.
##
makeStructure() {
  set +e
  local projectFolder="$1"  # parameter `folder`

  cleanStructure "$projectFolder"
  mkdir -p "$projectFolder/nef/playground"
}

cleanStructure() {
  set +e
  local projectFolder="$1"  # parameter `folder`

  rm -rf "$projectFolder/nef/playground" 1>/dev/null 2>/dev/null
}

cleanProject() {
  local projectFolder="$1"  # parameter `folder`
  rm -rf "$projectFolder"
}


#: - MAIN
set -e

root=`pwd`
projectName="$DEFAULT_PLAYGROUND"
version=$(lastestBowVersion)
branch=""
podfile=""

while [ "$1" != "" ]; do
    case $1 in
        --bow-version | version )    shift; version=$1 ;;
        --bow-branch | branch )      shift; branch=$1 ;;
        --podfile | podfile )        shift; podfile=$1 ;;

        --name | name )              shift; projectName=$1 ;;
        --playground | playground )  shift; projectName=$1 ;;

        -h | --help )                printHelp $@; exit 1 ;;
        * )                          printHelp $@; echo "${bold}[!] ${normal}${red}error:${reset} invalid argument: ${red}$1${reset}"; exit 1
    esac
    shift
done

projectFolder="$root/$projectName"

playground "$root" "$projectName"
setDependency "$projectFolder" "$projectName" "$version" "$branch" "$podfile"
